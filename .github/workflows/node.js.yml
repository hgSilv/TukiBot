# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

env:
  AWS_REGION: us-east-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 789350531933.dkr.ecr.us-east-1.amazonaws.com           # set this to your Amazon ECR repository name
  ECS_CLUSTER: TukiCluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: /tuki-deploy.json   # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: Tuki-Container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition


jobs:
  build:
  
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:

    - name: Checkout
      uses: actions/checkout@v2


    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2 #Setting up node
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - run: echo "------------------Build Stage-------------------------"
    - run: |
        echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > .env
        cat .env
        ls -la

    # AWS--------------------------------------------

    - name: Configure AWS credentials
      run: |
        mkdir -p ~/.aws
        touch ~/.aws/credentials

        echo "[default]
        aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY  }}
        aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" > ~/.aws/credentials
        echo "[default]
        region = us-east-1
        output = json
        " > ~/.aws/config
        pwd

    - name: Login to Amazon ECR
      id: login-ecr
      run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}

    #Docker
    - name: Build image
      id: build-image
      run: |
        docker build -t paulina.arvizu .
        docker tag paulina.arvizu:latest 789350531933.dkr.ecr.us-east-1.amazonaws.com/paulina.arvizu:latest
        docker images
        docker push 789350531933.dkr.ecr.us-east-1.amazonaws.com/paulina.arvizu:latest



  deploy:
    needs: [ build ]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: echo "---------------Deploy stage---------------------"
    - run: ls -la
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: 789350531933.dkr.ecr.us-east-1.amazonaws.com/paulina.arvizu:latest

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        cluster: ${{ env.ECS_CLUSTER }}
