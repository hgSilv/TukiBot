# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

env:
  AWS_REGION: us-east-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 789350531933.dkr.ecr.us-east-1.amazonaws.com           # set this to your Amazon ECR repository name
  ECS_CLUSTER: TukiCluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: tuki-task.json   # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: Tuki-Container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition


jobs:
  build:
  
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:

    - name: Checkout
      uses: actions/checkout@v2


    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2 #Setting up node
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - run: echo "------------------Build Stage-------------------------"
    - run: npm ci
    - run: |
        ls -la
        echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > chatMod/.env
        echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > jokeBot/.env
        echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > reminders/.env
        echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > serverMod/.env

    # AWS--------------------------------------------

    - name: Configure AWS credentials
      run: |
        mkdir -p ~/.aws
        touch ~/.aws/credentials

        echo "[default]
        aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY  }} 
        aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" > ~/.aws/credentials
        echo "[default]
        region = us-east-1
        output = json
        " > ~/.aws/config
        pwd
        

    - name: Login to Amazon ECR 
      id: login-ecr
      run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}

    #Docker

    #chatMod

    - name: Build image for chatmod
      id: build-image-chatmod
      run: |
        cd chatMod
        docker build -t chatmod .
        docker tag chatmod:latest 789350531933.dkr.ecr.us-east-1.amazonaws.com/chatmod:latest
        docker images
        docker push 789350531933.dkr.ecr.us-east-1.amazonaws.com/chatmod:latest

    #reminders
    - name: Build image for reminders
      id: build-image-reminders
      run: |
        cd reminders
        docker build -t reminders .
        docker tag reminders:latest 789350531933.dkr.ecr.us-east-1.amazonaws.com/reminders:latest
        docker images
        docker push 789350531933.dkr.ecr.us-east-1.amazonaws.com/reminders:latest


    #jokeBot
    - name: Build image for jokeBot
      id: build-image-jokeBot
      run: |
        cd jokeBot
        docker build -t jokebot .
        docker tag jokebot:latest 789350531933.dkr.ecr.us-east-1.amazonaws.com/jokebot:latest
        docker images
        docker push 789350531933.dkr.ecr.us-east-1.amazonaws.com/jokebot:latest

    #serverMod
    - name: Build image for serverMod
      id: build-image-serverMod
      run: |
        cd serverMod
        docker build -t servermod .
        docker tag servermod:latest 789350531933.dkr.ecr.us-east-1.amazonaws.com/servermod:latest
        docker images
        docker push 789350531933.dkr.ecr.us-east-1.amazonaws.com/servermod:latest

  deploy:
    needs: [ build ]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: echo "---------------Deploy stage---------------------"


    - run: ls -la
    - name: Configure AWS credentials
      run: |
        mkdir -p ~/.aws
        touch ~/.aws/credentials

        echo "[default]
        aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY  }}
        aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" > ~/.aws/credentials
        echo "[default]
        region = us-east-1
        output = json
        " > ~/.aws/config
        pwd

    - name: Delete all tasks if any
      id: task-kill
      run: |
        aws ecs list-tasks --cluster Ultra-TukiCluster --output text --query taskArns[0]
        aws ecs stop-task --cluster Ultra-TukiCluster --task $(aws ecs list-tasks --cluster Ultra-TukiCluster --output text --query taskArns[0])
        aws ecs stop-task --cluster Ultra-TukiCluster --task $(aws ecs list-tasks --cluster Ultra-TukiCluster --output text --query taskArns[0])
        aws ecs stop-task --cluster Ultra-TukiCluster --task $(aws ecs list-tasks --cluster Ultra-TukiCluster --output text --query taskArns[0])
        aws ecs stop-task --cluster Ultra-TukiCluster --task $(aws ecs list-tasks --cluster Ultra-TukiCluster --output text --query taskArns[0])
      continue-on-error: true
    
    
    - name: Set up tasks in cluster
      if: task-setup
      run: |
        aws ecs run-task --cluster Ultra-TukiCluster --placement-constraints type=distinctInstance --task-definition deploy-chatmod
        aws ecs run-task --cluster Ultra-TukiCluster --placement-constraints type=distinctInstance --task-definition deploy-jokebot
        aws ecs run-task --cluster Ultra-TukiCluster --placement-constraints type=distinctInstance --task-definition deploy-reminders
        aws ecs run-task --cluster Ultra-TukiCluster --placement-constraints type=distinctInstance --task-definition deploy-servermod



    